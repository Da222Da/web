import{_ as p,o as a,c as n,O as l}from"./chunks/framework.107aba48.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/npm/contents/pnpm.md","filePath":"docs/npm/contents/pnpm.md"}'),e={name:"docs/npm/contents/pnpm.md"};function o(c,s,t,r,i,d){return a(),n("div",null,s[0]||(s[0]=[l(`<h4 id="a-pnpm-如何进行管理依赖" tabindex="-1">a.pnpm 如何进行管理依赖? <a class="header-anchor" href="#a-pnpm-如何进行管理依赖" aria-label="Permalink to &quot;a.pnpm 如何进行管理依赖?&quot;">​</a></h4><p>pnpm 是 npm 的一个替代方案，可以减少 node_modules 的体积和安装时间。pnpm 的使用方法与 npm 类似，但是有一些区别。</p><p>首先，你需要安装 pnpm。你可以使用 npm 或者 yarn 来安装 pnpm。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pnpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pnpm</span></span></code></pre></div><p>安装完成后，你就可以使用 pnpm 来管理你的依赖了。例如，你可以使用以下命令来安装一个依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lodash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lodash</span></span></code></pre></div><p>这将会安装 lodash 依赖，并将其添加到你的 package.json 文件中的 dependencies 部分。</p><p>你也可以使用以下命令来安装一个开发依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lodash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lodash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre></div><p>这将会安装 lodash 依赖，并将其添加到你的 package.json 文件中的 devDependencies 部分。</p><p>pnpm 还有一些其他的命令，例如：</p><ul><li><code>pnpm update</code>：更新你的依赖。</li><li><code>pnpm remove</code>：移除你的依赖。</li><li><code>pnpm list</code>：列出你的依赖。</li></ul><h4 id="b-pnpm-如何构建工作区" tabindex="-1">b.pnpm 如何构建工作区? <a class="header-anchor" href="#b-pnpm-如何构建工作区" aria-label="Permalink to &quot;b.pnpm 如何构建工作区?&quot;">​</a></h4><p>pnpm 工作区（Workspaces）功能允许开发者在单个仓库中管理多个相互依赖的包。这种管理方式有助于维护大型项目，使得跨包开发和依赖管理变得更加高效。</p><p>要使用 pnpm 工作区，你需要先在项目的根目录下创建一个 <code>pnpm-workspace.yaml</code> 文件，该文件定义了工作区的结构。例如：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">packages</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&#39;packages/*&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">packages</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&#39;packages/*&#39;</span></span></code></pre></div><p>这表示工作区中的包位于 packages 目录下。你可以根据实际情况修改这个配置。</p>`,17)]))}const h=p(e,[["render",o]]);export{y as __pageData,h as default};
